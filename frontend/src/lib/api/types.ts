/*
 Generated by typeshare 1.13.3
*/

export enum ChatMode {
	Normal = 'normal',
	Search = 'search',
	Research = 'research'
}

export interface ChatCreateReq {
	model_id: number;
	mode: ChatMode;
}

export interface ChatCreateResp {
	id: number;
}

export interface ChatDeleteReq {
	id: number;
}

export interface ChatDeleteResp {
	deleted: boolean;
}

export interface ChatHaltReq {
	id: number;
}

export interface ChatHaltResp {}

export enum ChatPaginateReqOrder {
	/** greater than */
	Gt = 'gt',
	/** less than */
	Lt = 'lt'
}

export interface ChatPaginateReqLimit {
	/**
	 * Default to the beginning
	 * For Gt => minimum id
	 * For Le => maximum id
	 */
	id?: number;
	order: ChatPaginateReqOrder;
	limit?: number;
}

/**
 * Does not include upper & lower
 * lower [... return items ... ] upper
 */
export interface ChatPaginateReqRange {
	upper: number;
	lower: number;
}

export interface ChatPaginateRespList {
	id: number;
	model_id: number;
	title?: string;
}

export interface ChatPaginateResp {
	list: ChatPaginateRespList[];
}

export interface ChatReadReq {
	id: number;
}

export interface ChatReadResp {
	mode: ChatMode;
	model_id?: number;
	title?: string;
}

export interface ChatUpdateReq {
	chat_id: number;
	title?: string;
}

export interface ChatUpdateResp {
	wrote: boolean;
}

export enum ErrorKind {
	Unauthorized = 'unauthorized',
	MalformedToken = 'malformed_token',
	MalformedRequest = 'malformed_request',
	Internal = 'internal',
	LoginFail = 'login_fail',
	ResourceNotFound = 'resource_not_found',
	ApiFail = 'api_fail',
	ToolCallFail = 'tool_call_fail'
}

export interface Error {
	error: ErrorKind;
	reason: string;
}

export interface FileUploadResp {
	id: number;
}

export interface LoginReq {
	username: string;
	password: string;
}

export interface LoginResp {
	token: string;
	exp: string;
}

export interface MessageCreateReqFile {
	id: number;
	name: string;
}

export interface MessageCreateReq {
	chat_id: number;
	model_id: number;
	mode: ChatMode;
	text: string;
	files: MessageCreateReqFile[];
}

export interface MessageCreateResp {
	id: number;
}

export enum MessagePaginateReqOrder {
	/** greater than */
	Gt = 'gt',
	/** less than */
	Lt = 'lt'
}

export interface MessagePaginateReqLimit {
	chat_id: number;
	/** default to i32::MAX */
	id?: number;
	order: MessagePaginateReqOrder;
	limit?: number;
}

/**
 * Does not include upper & lower
 * lower [... return items ... ] upper
 */
export interface MessagePaginateReqRange {
	chat_id: number;
	upper: number;
	lower: number;
}

export enum MessagePaginateRespRole {
	User = 'user',
	Assistant = 'assistant'
}

export type MessagePaginateRespChunkKind =
	| { t: 'text'; c: MessagePaginateRespChunkKindText }
	| { t: 'file'; c: MessagePaginateRespChunkKindFile }
	| { t: 'reasoning'; c: MessagePaginateRespChunkKindReasoning }
	| { t: 'tool_call'; c: MessagePaginateRespChunkKindToolCall }
	| { t: 'error'; c: MessagePaginateRespChunkKindError };

export interface MessagePaginateRespChunk {
	id: number;
	kind: MessagePaginateRespChunkKind;
}

export interface MessagePaginateRespList {
	id: number;
	role: MessagePaginateRespRole;
	chunks: MessagePaginateRespChunk[];
	token: number;
	price: number;
}

export interface MessagePaginateResp {
	list: MessagePaginateRespList[];
}

export interface MessagePaginateRespChunkKindError {
	content: string;
}

export interface MessagePaginateRespChunkKindFile {
	name: string;
	id: number;
}

export interface MessagePaginateRespChunkKindReasoning {
	content: string;
}

export interface MessagePaginateRespChunkKindText {
	content: string;
}

export interface MessagePaginateRespChunkKindToolCall {
	name: string;
	args: string;
	content: string;
}

export interface MessageWriteReq {
	/** message id */
	id: number;
	text: string;
}

export interface ModelCheckReq {
	config: string;
}

export interface ModelCheckResp {
	reason?: string;
}

export interface ModelCreateReq {
	config: string;
}

export interface ModelCreateResp {
	id: number;
	display_name: string;
	image_input: boolean;
	audio_input: boolean;
	other_file_input: boolean;
}

export interface ModelDeleteReq {
	id: number;
}

export interface ModelDeleteResp {
	deleted: boolean;
}

export interface ModelList {
	id: number;
	display_name: string;
	image_input: boolean;
	audio_input: boolean;
	other_file_input: boolean;
}

export interface ModelListReq {}

export interface ModelListResp {
	list: ModelList[];
}

export interface ModelReadReq {
	id: number;
}

export interface ModelReadResp {
	raw: string;
}

export interface ModelWriteReq {
	id: number;
	config: string;
}

export interface ModelWriteResp {
	display_name: string;
	wrote: boolean;
}

export interface RenewReq {
	token: string;
}

export interface RenewResp {
	token: string;
	exp: string;
}

export interface Resp {}

export interface SseReq {
	id: number;
}

export interface SseRespError {
	content: string;
}

export interface SseRespMessageComplete {
	id: number;
	chunk_ids: number[];
	token_count: number;
	cost: number;
}

export interface SseRespReasoning {
	content: string;
}

export interface SseRespTitle {
	title: string;
}

export interface SseRespToken {
	content: string;
}

export interface SseRespToolCall {
	name: string;
	args: string;
}

export interface SseRespToolResult {
	content: string;
}

export interface SseRespUser {
	message_id: number;
	chunk_id: number;
	content: string;
}

export enum LastKind {
	User = 'User',
	Assistant = 'Assistant'
}

export interface SseRespVersion {
	version: number;
	last_kind: LastKind;
}

export interface UserCreateReq {
	username: string;
	password: string;
}

export interface UserCreateResp {
	user_id: number;
}

export interface UserDeleteReq {
	user_id: number;
}

export interface UserDeleteResp {
	deleted: boolean;
}

export interface UserList {
	id: number;
	name: string;
}

export interface UserListReq {}

export interface UserListResp {
	list: UserList[];
}

export interface UserPreference {
	theme?: string;
	locale?: string;
	submit_on_enter?: string;
}

export interface UserReadReq {
	/** If omit will use the current user instead */
	user_id?: number;
}

export interface UserReadResp {
	user_id: number;
	username: string;
	preference: UserPreference;
}

export interface UserUpdateReq {
	/** If omit will use the current user instead */
	user_id?: number;
	preference?: UserPreference;
	password?: string;
}

export interface UserUpdateResp {
	user_id: number;
}

export type ChatPaginateReq =
	| { t: 'limit'; c: ChatPaginateReqLimit }
	| { t: 'range'; c: ChatPaginateReqRange };

export type MessagePaginateReq =
	| { t: 'limit'; c: MessagePaginateReqLimit }
	| { t: 'range'; c: MessagePaginateReqRange };

export type SseResp =
	| { t: 'version'; c: SseRespVersion }
	| { t: 'token'; c: SseRespToken }
	| { t: 'reasoning'; c: SseRespReasoning }
	| { t: 'tool_call'; c: SseRespToolCall }
	| { t: 'tool_result'; c: SseRespToolResult }
	| { t: 'complete'; c: SseRespMessageComplete }
	| { t: 'title'; c: SseRespTitle }
	| { t: 'error'; c: SseRespError };
